require("dotenv").config();
const path = require("path");
const express = require("express");
const bodyParser = require("body-parser");
const multer = require("multer");
const { graphqlHTTP } = require("express-graphql");
const { clearImage } = require('./util/file');

const graphqlSchema = require("./graphql/schema");
const graphqlResolvers = require("./graphql/resolvers");
const graphqlAuth = require("./middleware/graphql-auth");

const mongoose = require("mongoose");

const MONGODB_URI = process.env.MONGODB_URI;

const app = express();

//here we configure multer
const fileStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "images");
  },
  filename: (req, file, cb) => {
    const cleanFileName = new Date().toISOString().replace(/:/g, "-") + "-" + file.originalname;
    cb(
      null, cleanFileName.replace(/\\/g, "/") // Ensure forward slashes
    );
  },
});

const fileFilter = (req, file, cb) => {
  if (
    file.mimetype === "image/jpeg" ||
    file.mimetype === "image/jpg" ||
    file.mimetype === "image/png"
  ) {
    cb(null, true);
  } else {
    cb(null, false);
  }
};
// app.use(bodyParser.urlencoded({extended: false})); //x-www-form-urlencoded <form>
// Middleware to parse JSON bodies
app.use(bodyParser.json()); //application/json

//here we register multer
app.use(
  multer({ fileFilter: fileFilter, storage: fileStorage }).single("image")
);
//serve static file
app.use("/images", express.static(path.join(__dirname, "images")));

app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader(
    "Access-Control-Allow-Methods",
    "OPTIONS, GET, POST, PUT, PATCH, DELETE"
  );
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  if (req.method === "OPTIONS") {
    return res.status(200).end(); // For preflight requests, respond with 200 and end
  }

  next();
});

//authorization middleware
app.use(graphqlAuth);

app.put('/post-image', (req, res, next) => {
  if (!req.isAuth) {
    throw new Error('Not authenticated!');
  }

  // Manually parse 'oldPath' from the request body
  const oldPath = req.body.oldPath && req.body.oldPath.trim() !== "" ? req.body.oldPath : null;

  // console.log('Request body:', req.body); // Log the entire request body
  // console.log('Old path:', req.body.oldPath);   // Log the old path specifically

  // If no file is uploaded, just return success without modifying image
  if (!req.file) {
    console.log("No new file provided, skipping image update.");
    return res.status(200).json({ message: "No new image uploaded." });
  }

  // If there's an old image, delete it before saving the new one
  if (oldPath && oldPath !== "undefined") {
    clearImage(oldPath);
  }else {
    console.log("No valid oldPath provided");
  }

  return res
    .status(201)
    .json({ message: 'File stored.', filePath: req.file.path.replace(/\\/g, "/") });
});

// GraphQL endpoint
app.use(
  "/graphql",
  graphqlHTTP({
    schema: graphqlSchema,
    rootValue: graphqlResolvers,
    graphiql: true,
    customFormatErrorFn(error) {
      console.error("GraphQL Error:", error);
      if (!error.originalError) {
        return error; //here we return error that was generated by graphql;
      }
      const data = error.originalError.data || null;
      const code = error.originalError.code || 500;
      const msg = error.message || "An error occurred!";
      // if we have original error
      if (error.originalError) {
        return { data: data, message: msg, status: code };
      }
    },
  })
);

app.use((error, req, res, next) => {
  console.log(error);
  const status = error.statusCode || 500;
  const message = error.message;
  const data = error.data;
  res.status(status).json({ message: message, data: data });
});

mongoose
  .connect(MONGODB_URI)
  .then((result) => {
    app.listen(8080, () => {
      console.log("Server is running on http://localhost:8080");
    });
  })
  .catch((err) => {
    console.log(err);
  });